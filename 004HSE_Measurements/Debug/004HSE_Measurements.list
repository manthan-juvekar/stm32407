
004HSE_Measurements.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001a0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000328  08000330  00001330  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000328  08000328  00001330  2**0
                  CONTENTS
  4 .ARM          00000000  08000328  08000328  00001330  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000328  08000330  00001330  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000328  08000328  00001328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800032c  0800032c  0000132c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001330  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001330  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00001330  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000120  00000000  00000000  00001360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000097  00000000  00000000  00001480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000048  00000000  00000000  00001518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000002d  00000000  00000000  00001560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000f94  00000000  00000000  0000158d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000042a  00000000  00000000  00002521  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00003d4e  00000000  00000000  0000294b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00006699  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000058  00000000  00000000  000066dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007c  00000000  00000000  00006734  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000310 	.word	0x08000310

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000310 	.word	0x08000310

080001c8 <main>:
#define RCC_CR_REG_ADDR            (RCC_BASE_ADDR + RCC_CR_REG_OFFSET )

#define GPIOA_BASE_ADDR            0x40020000UL

int main(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b087      	sub	sp, #28
 80001cc:	af00      	add	r7, sp, #0

	uint32_t *pRccCrReg = (uint32_t*)RCC_CR_REG_ADDR;
 80001ce:	4b24      	ldr	r3, [pc, #144]	@ (8000260 <main+0x98>)
 80001d0:	617b      	str	r3, [r7, #20]
	uint32_t *pRccCfgrReg = (uint32_t*)RCC_CFGR_REG_ADDR;
 80001d2:	4b24      	ldr	r3, [pc, #144]	@ (8000264 <main+0x9c>)
 80001d4:	613b      	str	r3, [r7, #16]

	//1.Enable the HSE clock using HSEON bit (RCC_CR)
	*pRccCrReg |= ( 1 << 16);
 80001d6:	697b      	ldr	r3, [r7, #20]
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80001de:	697b      	ldr	r3, [r7, #20]
 80001e0:	601a      	str	r2, [r3, #0]

	//2. Wait until HSE clock from the external crystal stabilizes (only if crystal is connected )
	while( ! (*pRccCrReg & ( 1 << 17) ) );
 80001e2:	bf00      	nop
 80001e4:	697b      	ldr	r3, [r7, #20]
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d0f9      	beq.n	80001e4 <main+0x1c>

	//3. Switch the system clock to HSE (RCC_CFGR)
	*pRccCfgrReg |= ( 1 << 0);
 80001f0:	693b      	ldr	r3, [r7, #16]
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	f043 0201 	orr.w	r2, r3, #1
 80001f8:	693b      	ldr	r3, [r7, #16]
 80001fa:	601a      	str	r2, [r3, #0]

	/**************Do MCO1 settings to measure it*********************/

	//1. Configure the RCC_CFGR MCO1 bit fields to select HSE as clock source
		*pRccCfgrReg |= ( 1 << 22); //clear 21 and SET 22
 80001fc:	693b      	ldr	r3, [r7, #16]
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8000204:	693b      	ldr	r3, [r7, #16]
 8000206:	601a      	str	r2, [r3, #0]

		//Configure MCO1 prescaler // divisor as 4
		*pRccCfgrReg |= ( 1 << 25);
 8000208:	693b      	ldr	r3, [r7, #16]
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8000210:	693b      	ldr	r3, [r7, #16]
 8000212:	601a      	str	r2, [r3, #0]
		*pRccCfgrReg |= ( 1 << 26);
 8000214:	693b      	ldr	r3, [r7, #16]
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800021c:	693b      	ldr	r3, [r7, #16]
 800021e:	601a      	str	r2, [r3, #0]
	 * which will be covered in later sections of this course.
	 */

		//a ) Enable the peripheral clock for GPIOA peripheral

		 uint32_t *pRCCAhb1Enr = (uint32_t*)(RCC_BASE_ADDR + 0x30);
 8000220:	4b11      	ldr	r3, [pc, #68]	@ (8000268 <main+0xa0>)
 8000222:	60fb      	str	r3, [r7, #12]
		*pRCCAhb1Enr |= ( 1 << 0); //Enable GPIOA peripheral clock
 8000224:	68fb      	ldr	r3, [r7, #12]
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	f043 0201 	orr.w	r2, r3, #1
 800022c:	68fb      	ldr	r3, [r7, #12]
 800022e:	601a      	str	r2, [r3, #0]

		//b ) Configure the mode of GPIOA pin 8 as alternate function mode

		uint32_t *pGPIOAModeReg = (uint32_t*)(GPIOA_BASE_ADDR + 00);
 8000230:	4b0e      	ldr	r3, [pc, #56]	@ (800026c <main+0xa4>)
 8000232:	60bb      	str	r3, [r7, #8]
		*pGPIOAModeReg &= ~( 0x3 << 16); //clear
 8000234:	68bb      	ldr	r3, [r7, #8]
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800023c:	68bb      	ldr	r3, [r7, #8]
 800023e:	601a      	str	r2, [r3, #0]
		*pGPIOAModeReg |= ( 0x2 << 16);  //set
 8000240:	68bb      	ldr	r3, [r7, #8]
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000248:	68bb      	ldr	r3, [r7, #8]
 800024a:	601a      	str	r2, [r3, #0]

		//c ) Configure the alternation function register to set the mode 0 for PA8

		uint32_t *pGPIOAAltFunHighReg = (uint32_t*)(GPIOA_BASE_ADDR + 0x24);
 800024c:	4b08      	ldr	r3, [pc, #32]	@ (8000270 <main+0xa8>)
 800024e:	607b      	str	r3, [r7, #4]
		*pGPIOAAltFunHighReg &= ~( 0xf << 0);
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	f023 020f 	bic.w	r2, r3, #15
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	601a      	str	r2, [r3, #0]


	for(;;);
 800025c:	bf00      	nop
 800025e:	e7fd      	b.n	800025c <main+0x94>
 8000260:	40023800 	.word	0x40023800
 8000264:	40023808 	.word	0x40023808
 8000268:	40023830 	.word	0x40023830
 800026c:	40020000 	.word	0x40020000
 8000270:	40020024 	.word	0x40020024

08000274 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000274:	480d      	ldr	r0, [pc, #52]	@ (80002ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000276:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000278:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800027c:	480c      	ldr	r0, [pc, #48]	@ (80002b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800027e:	490d      	ldr	r1, [pc, #52]	@ (80002b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000280:	4a0d      	ldr	r2, [pc, #52]	@ (80002b8 <LoopForever+0xe>)
  movs r3, #0
 8000282:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000284:	e002      	b.n	800028c <LoopCopyDataInit>

08000286 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000286:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000288:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800028a:	3304      	adds	r3, #4

0800028c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800028c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800028e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000290:	d3f9      	bcc.n	8000286 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000292:	4a0a      	ldr	r2, [pc, #40]	@ (80002bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000294:	4c0a      	ldr	r4, [pc, #40]	@ (80002c0 <LoopForever+0x16>)
  movs r3, #0
 8000296:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000298:	e001      	b.n	800029e <LoopFillZerobss>

0800029a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800029a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800029c:	3204      	adds	r2, #4

0800029e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800029e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002a0:	d3fb      	bcc.n	800029a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002a2:	f000 f811 	bl	80002c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002a6:	f7ff ff8f 	bl	80001c8 <main>

080002aa <LoopForever>:

LoopForever:
  b LoopForever
 80002aa:	e7fe      	b.n	80002aa <LoopForever>
  ldr   r0, =_estack
 80002ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002b4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002b8:	08000330 	.word	0x08000330
  ldr r2, =_sbss
 80002bc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002c0:	2000001c 	.word	0x2000001c

080002c4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002c4:	e7fe      	b.n	80002c4 <ADC_IRQHandler>
	...

080002c8 <__libc_init_array>:
 80002c8:	b570      	push	{r4, r5, r6, lr}
 80002ca:	4d0d      	ldr	r5, [pc, #52]	@ (8000300 <__libc_init_array+0x38>)
 80002cc:	4c0d      	ldr	r4, [pc, #52]	@ (8000304 <__libc_init_array+0x3c>)
 80002ce:	1b64      	subs	r4, r4, r5
 80002d0:	10a4      	asrs	r4, r4, #2
 80002d2:	2600      	movs	r6, #0
 80002d4:	42a6      	cmp	r6, r4
 80002d6:	d109      	bne.n	80002ec <__libc_init_array+0x24>
 80002d8:	4d0b      	ldr	r5, [pc, #44]	@ (8000308 <__libc_init_array+0x40>)
 80002da:	4c0c      	ldr	r4, [pc, #48]	@ (800030c <__libc_init_array+0x44>)
 80002dc:	f000 f818 	bl	8000310 <_init>
 80002e0:	1b64      	subs	r4, r4, r5
 80002e2:	10a4      	asrs	r4, r4, #2
 80002e4:	2600      	movs	r6, #0
 80002e6:	42a6      	cmp	r6, r4
 80002e8:	d105      	bne.n	80002f6 <__libc_init_array+0x2e>
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80002f0:	4798      	blx	r3
 80002f2:	3601      	adds	r6, #1
 80002f4:	e7ee      	b.n	80002d4 <__libc_init_array+0xc>
 80002f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80002fa:	4798      	blx	r3
 80002fc:	3601      	adds	r6, #1
 80002fe:	e7f2      	b.n	80002e6 <__libc_init_array+0x1e>
 8000300:	08000328 	.word	0x08000328
 8000304:	08000328 	.word	0x08000328
 8000308:	08000328 	.word	0x08000328
 800030c:	0800032c 	.word	0x0800032c

08000310 <_init>:
 8000310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000312:	bf00      	nop
 8000314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000316:	bc08      	pop	{r3}
 8000318:	469e      	mov	lr, r3
 800031a:	4770      	bx	lr

0800031c <_fini>:
 800031c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800031e:	bf00      	nop
 8000320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000322:	bc08      	pop	{r3}
 8000324:	469e      	mov	lr, r3
 8000326:	4770      	bx	lr
